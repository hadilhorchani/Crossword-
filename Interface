import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class CrosswordGame extends JFrame {
    private static final String[][] crossword = {
            {"B", "", "o", "K"},
            {"A", "", "", "R"},
            {"N", "", "", ""},
            {"D", "E", "S", "K"}
    };

    private static final String[][] clues = {
            {"Where you find pages", "Place to read"},
            {"Commonly found in libraries", "Where you sit and study"},
            {"Opposite of vertical", "Not standing"},
            {"Flat surface for writing", "Where you put your laptop"}
    };

    private JTextField answerField;
    private JButton submitButton;
    private JLabel clueLabel;
    private JLabel crosswordLabel;

    private int currentClueIndex = 0;

    public CrosswordGame() {
        setTitle("Crossword Game");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // Clue label
        clueLabel = new JLabel("Clue 1: " + clues[currentClueIndex][0]);
        add(clueLabel, BorderLayout.NORTH);

        // Crossword label
        crosswordLabel = new JLabel(getFormattedCrossword());
        crosswordLabel.setHorizontalAlignment(SwingConstants.CENTER);
        add(crosswordLabel, BorderLayout.CENTER);

        // Answer field
        answerField = new JTextField(10);
        add(answerField, BorderLayout.WEST);

        // Submit button
        submitButton = new JButton("Submit");
        submitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                checkAnswer();
            }
        });
        add(submitButton, BorderLayout.EAST);

        pack();
        setVisible(true);
    }

    private String getFormattedCrossword() {
        StringBuilder crosswordBuilder = new StringBuilder();
        crosswordBuilder.append("<html><pre>");
        for (String[] row : crossword) {
            for (String cell : row) {
                crosswordBuilder.append(cell.isEmpty() ? "_ " : cell + " ");
            }
            crosswordBuilder.append("<br>");
        }
        crosswordBuilder.append("</pre></html>");
        return crosswordBuilder.toString();
    }

    private void checkAnswer() {
        String answer = answerField.getText().toUpperCase();
        String expectedAnswer = crossword[currentClueIndex][0];
        if (answer.equals(expectedAnswer)) {
            JOptionPane.showMessageDialog(this, "Correct!");
            crossword[currentClueIndex][0] = clues[currentClueIndex][0];
            currentClueIndex++;
            if (currentClueIndex < clues.length) {
                updateUI();
            } else {
                JOptionPane.showMessageDialog(this, "Congratulations! You've completed the crossword!");
                dispose();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Incorrect. The answer is: " + expectedAnswer);
        }
    }

    private void updateUI() {
        clueLabel.setText("Clue " + (currentClueIndex + 1) + ": " + clues[currentClueIndex][0]);
        crosswordLabel.setText(getFormattedCrossword());
        answerField.setText("");
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new CrosswordGame();
            }
        });
    }
}
